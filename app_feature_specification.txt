
-----

## プロジェクト概要

リアルタイムで投票結果が反映されるアンケートアプリを構築します。ユーザーはアンケートを作成し、投票すると、結果が即座にグラフに反映される仕組みです。

-----

## 技術スタック

  * **フロントエンド**: **Next.js 14 (App Router)**
  * **UI フレームワーク**: **Tailwind CSS**
  * **データベース**: **Supabase**
  * **グラフ描画ライブラリ**: **Recharts**
  * **言語**: TypeScript

-----

## Supabase データベース設計

以下の3つのテーブルと、\*\*行レベルセキュリティ (RLS)\*\*を設定します。

1.  **`polls` テーブル**:

      * `id`: `UUID`, 主キー
      * `title`: `text`, `not null`
      * `user_id`: `UUID`, `auth.uid()`への外部キー（作成者の特定用）
      * `created_at`: `timestamp with timezone`, `default now()`
      * **RLS**: 認証されたユーザーのみがレコードを挿入・更新・削除できる。

2.  **`options` テーブル**:

      * `id`: `UUID`, 主キー
      * `poll_id`: `UUID`, `polls.id`への外部キー
      * `text`: `text`, `not null`

3.  **`votes` テーブル**:

      * `id`: `UUID`, 主キー
      * `poll_id`: `UUID`, `polls.id`への外部キー
      * `option_id`: `UUID`, `options.id`への外部キー
      * `user_id`: `UUID`, `auth.uid()`への外部キー
      * `created_at`: `timestamp with timezone`, `default now()`
      * **RLS**: 認証されたユーザーのみがレコードを挿入できる。

-----

## 画面構成とUI/UX要件

### 1\. トップページ (`/page.tsx`)

  * **構成**: アプリのトップページ。
  * **機能**: ログインフォームとサインアップリンクを表示します。ログイン済みの場合は、ダッシュボードへリダイレクトします。

### 2\. ダッシュボード (`/dashboard/page.tsx`)

  * **構成**: ログイン後のメイン画面。
  * **機能**:
      * ユーザーが作成したアンケートを一覧表示するUI。
      * 「新しいアンケートを作成」ボタン。
      * 各アンケートカードにはタイトルと作成日時を表示。

### 3\. アンケート作成ページ (`/dashboard/create/page.tsx`)

  * **構成**: 新しいアンケートを作成するためのフォーム。
  * **機能**:
      * アンケートの質問（タイトル）を入力するテキストフィールド。
      * 選択肢を入力するテキストフィールドを複数（デフォルト2つ、追加ボタンで増やせる）。
      * フォーム送信ボタン。

### 4\. アンケート詳細ページ (`/poll/[id]/page.tsx`)

  * **構成**: 個別のアンケートと投票結果を表示するページ。
  * **機能**:
      * アンケートの質問（タイトル）を表示。
      * **投票フォーム**: 投票がまだ済んでいないユーザーには、選択肢のリストと投票ボタンを表示。
      * **リアルタイム投票結果**: グラフ描画ライブラリ（Recharts）を使用して、投票結果を棒グラフでリアルタイムに表示します。
      * **投票済みメッセージ**: 投票済みのユーザーには、「投票済みです」というメッセージを表示し、投票フォームを非表示にします。

-----

## 実装ロジック

### 1\. 認証

  * **Supabase Client**: `src/lib/supabase/client.ts`と`src/lib/supabase/server.ts`に、クライアントサイドとサーバーサイドのSupabaseクライアントをそれぞれ設定します。
  * **認証フロー**: ユーザーがサインアップ・ログインすると、セッションを確立し、`user_id`をSupabaseから取得します。
  * **認証ガード**: `dashboard`配下のルートは、未認証ユーザーがアクセスできないようにガードします。

### 2\. データ操作

  * **アンケート作成**:

      * フォーム送信時、`polls`と`options`テーブルにデータを挿入します。
      * `options`テーブルに挿入する際、`poll_id`として新しく作成された`polls`テーブルの`id`を使用します。

  * **投票**:

      * 投票ボタンクリック時、`votes`テーブルに`poll_id`, `option_id`, `user_id`を挿入します。
      * 挿入前に、**`user_id`と`poll_id`の組み合わせが既に`votes`テーブルに存在しないか確認**し、重複投票を防ぎます。

### 3\. リアルタイム更新

  * **購読**: アンケート詳細ページでは、Supabase SDKの`client.from('votes').on('*', ...).subscribe()`メソッドを使用し、`votes`テーブルへの変更をリアルタイムで購読します。
  * **データ集計**: 投票の変更イベントが通知されるたびに、`votes`テーブルからそのアンケートに対する全投票数を再取得し、各選択肢の得票数を集計してグラフデータを更新します。

-----

## ファイル構成案

```
/app
├── dashboard
│   ├── create
│   │   └── page.tsx
│   ├── page.tsx
├── poll
│   ├── [id]
│   │   └── page.tsx
├── components
│   ├── AuthForm.tsx
│   ├── PollList.tsx
│   ├── PollCard.tsx
│   ├── PollForm.tsx
│   └── PollChart.tsx
├── lib
│   ├── supabase
│   │   ├── client.ts
│   │   └── server.ts
│   └── utils.ts
└── page.tsx
```